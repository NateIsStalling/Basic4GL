'rlist.gb
'Description: Real(float) list structure, RList, and related functions + subroutines
'Author: Nathaniel Nielsen
'Last Updated: August 27, 2016
'Uses doubly linked list implementation
'See: https://en.wikipedia.org/wiki/Doubly_linked_list

'Default value returned by RListValueAt#()
const RLIST_DEFAULT_VALUE# = 0.0

'RList node, is doubly linked
struc RListNode
    dim value#
    dim RListNode &prevNode, RListNode &nextNode
endstruc

'Real list, is doubly linked
struc RList
    'First element in list
    dim RListNode &head
    'Last element in list
    dim RListNode &tail
endstruc   

'Function declarations
declare sub RListInsertBeginning(RList &list, value#)
declare sub RListInsertNodeBeginning(RList &list, RListNode &newNode)
declare sub RListInsertEnd(RList &list, value#)
declare sub RListInsertNodeEnd(RList &list, RListNode &newNode)
declare sub RListInsertAt(RList &list, index, value#)
declare sub RListInsertNodeAt(RList &list, index, RListNode &newNode)
declare sub RListSetValueAt(RList &list, index, value#)

declare sub RListInsertAfter(RList &list, RListNode &node, RListNode &newNode)
declare sub RListInsertBefore(RList &list, RListNode &node, RListNode &newNode)

declare sub RListRemove(RList &list, RListNode &node)
declare sub RListRemoveAt(RList &list, index)
declare sub RListRemoveFirst(RList &list, value#)
declare sub RListRemoveLast(RList &list, value#)

declare function RListValueAt#(RList &list, index)
declare function RListNode &RListNodeAt(RList &list, index)
declare function RListNodeEquals(RListNode &node1, RListNode &node2)

declare function RListSize(RList &list)
 
'Add value to beginning of RList
sub RListInsertBeginning(RList &list, value#)
    'Allocate new node
    dim RListNode &node
    alloc node
    node.value# = value#

    if &list.head = null then 
        &list.head = &node
        &list.tail = &node
        &node.prevNode = null
        &node.nextNode = null
    else
        RListInsertBefore(list, list.head, node)
    endif
endsub

'Add node to beginning of RList
sub RListInsertNodeBeginning(RList &list, RListNode &newNode)
    if &list.head = null then 
        &list.head = &newNode
        &list.tail = &newNode
        &newNode.prevNode = null
        &newNode.nextNode = null
    else
        RListInsertBefore(list, list.head, newNode)
    endif
endsub

'Add value to end of RList
sub RListInsertEnd(RList &list, value#)
    'Allocate new node
    dim RListNode &node
    alloc node
    node.value# = value#

    if &list.tail = null then 
        RListInsertNodeBeginning(list, node)
    else
        RListInsertAfter(list, list.tail, node)
    endif
endsub

'Add node to end of RList
sub RListInsertNodeEnd(RList &list, RListNode &newNode)
    if &list.tail = null then 
        RListInsertNodeBeginning(list, newNode)
    else
        RListInsertAfter(list, list.tail, newNode)
    endif
endsub

'Insert node at index in a RList;
'Inserts node at beginning of list if list is empty or index is less than 0,
'Inserts node at end of list if index is greater than the list's size
sub RListInsertAt(RList &list, index, value#)
    dim i
    dim RListNode &node = &list.head
    'Allocate new node
    dim RListNode &newNode
    alloc newNode
    newNode.value# = value#

    'Check if list is empty
    if &list.head <> null and index >= 0 then
        'Traverse list forwards
        while &node <> null
            if i = index then
                'Add new node
                RListInsertBefore(list, node, newNode)
                return  'Exit loop
            endif
            &node = &node.nextNode
            i = i + 1
        wend
        'Index was out of range; add new node to end of list
        RListInsertNodeEnd(list, newNode)
    else
        'List is empty or index is invalid
        RListInsertNodeBeginning(list, newNode)
    endif
endsub
        
'Insert node at index in a RList;
'Inserts node at beginning of list if list is empty or index is less than 0,
'Inserts node at end of list if index is greater than the list's size
sub RListInsertNodeAt(RList &list, index, RListNode &newNode)
    dim i
    dim RListNode &node = &list.head
    'Check if list is empty
    if &list.head <> null and index >= 0 then
        'Traverse list forwards
        while &node <> null
            if i = index then
                'Add new node
                RListInsertBefore(list, node, newNode)
                return  'Exit loop
            endif
            &node = &node.nextNode
            i = i + 1
        wend
        'Index was out of range; add new node to end of list
        RListInsertNodeEnd(list, newNode)
    else
        'List is empty or index is invalid
        RListInsertNodeBeginning(list, newNode)
    endif
endsub

'Set value of node at index in list;
'Only allocates a new node if index is out of range; 
'the new node is either inserted at the beginning or end of the list
sub RListSetValueAt(RList &list, index, value#)
    dim i
    dim RListNode &node = &list.head
    'Check if list is empty
    if &list.head <> null and index >= 0 then
        'Traverse list forwards
        while &node <> null
            if i = index then
                'Set node value
                node.value# = value#
                return  'Exit loop
            endif
            &node = &node.nextNode
            i = i + 1
        wend
        'Index was out of range; add new node to end of list
        RListInsertEnd(list, value#)
    else
        'List is empty or index is invalid
        RListInsertBeginning(list, value#)
    endif
endsub

'Insert node after another node in a RList
sub RListInsertAfter(RList &list, RListNode &node, RListNode &newNode)
    &newNode.prevNode = &node
    &newNode.nextNode = &node.nextNode
    if &node.nextNode = null then
        &list.tail = &newNode
    else
        &node.nextNode.prevNode = &newNode        
    endif
    &node.nextNode = &newNode
endsub

'Insert node before another node in a RList
sub RListInsertBefore(RList &list, RListNode &node, RListNode &newNode)
    &newNode.prevNode = &node.prevNode
    &newNode.nextNode = &node
    if &node.prevNode = null then
        &list.head = &newNode
    else
        &node.prevNode.nextNode = &newNode        
    endif
    &node.prevNode = &newNode
endsub


'Remove node from RList; assumes node exists in RList
'Note: Basic4GL does not deallocate memory until program completes
sub RListRemove(RList &list, RListNode &node)
    'Check if node is null
    if &node = null then
        'Do nothing
        return
    endif
    if &node.prevNode = null then
       &list.head = &node.nextNode
    else
       &node.prevNode.nextNode = &node.nextNode
    endif
    if &node.nextNode = null then
       &list.tail = &node.prevNode
    else
       &node.nextNode.prevNode = &node.prevNode
    endif
endsub

'Remove element from RList at index
'Note: Basic4GL does not deallocate memory until program completes
sub RListRemoveAt(RList &list, index)
    dim i
    dim RListNode &node = &list.head
    'Traverse list forwards
    while &node <> null
        if i = index then
            RListRemove(list, node)
            return  'Exit loop
        endif
        &node = &node.nextNode
        i = i + 1
    wend
endsub

'Remove first element from RList that equals value
'Note: Basic4GL does not deallocate memory until program completes
sub RListRemoveFirst(RList &list, value#)
    dim RListNode &node = &list.head
    'Traverse list forwards
    while &node <> null
        if node.value# = value# then
            RListRemove(list, node)
            return  'Exit loop
        endif
        &node = &node.nextNode
    wend
endsub

'Remove last element from RList that equals value
'Note: Basic4GL does not deallocate memory until program completes
sub RListRemoveLast(RList &list, value#)
    dim RListNode &node = &list.tail
    'Traverse list backwards
    while &node <> null
        if node.value# = value# then
            RListRemove(list, node)
            return  'Exit loop
        endif
        &node = &node.prevNode
    wend
endsub

'Returns value at index in list; returns default value if index is invalid
function RListValueAt#(RList &list, index)
    dim i
    dim RListNode &node = &list.head   
    if index >= 0 then
        'Traverse list forwards
        while &node <> null
            if i = index then
                'Return value
                return node.value#
            endif
            &node = &node.nextNode
            i = i + 1
        wend
    endif
    'Index was invalid; return default value
    return RLIST_DEFAULT_VALUE#
endfunction

'Returns node at index in list; returns null if index is invalid
function RListNode &RListNodeAt(RList &list, index)
    dim i
    dim RListNode &node = &list.head   
    if index >= 0 then
        'Traverse list forwards
        while &node <> null
            if i = index then
                'Return value
                return &node
            endif
            &node = &node.nextNode
            i = i + 1
        wend
    endif
    'Index was invalid; return null
    return null
endfunction

'Compare the values of two nodes
'Returns true if nodes' values are equal
function RListNodeEquals(RListNode &node1, RListNode &node2)
    return &node1.value# = &node2.value#
endfunction

'Get size of list
function RListSize(RList &list)
    dim size = 0
    dim RListNode &node = &list.head
    'Traverse list forwards
    while &node <> null
        &node = &node.nextNode
        size = size + 1
    wend
    return size
endfunction